var Q = require('q');
var hfm = require('hexo-front-matter');
var moment = require('moment');
var _ = require('underscore');
var extend = require('extend');
var fs = require('fs');
var hexoFS = require('hexo-fs');

var safeKeys = ['title', 'date', 'tags', 'categories', '_content'];

function _update(modelName, id, data, hexo) {
    var deferred = Q.defer();
    var item = hexo.model(modelName).get(id);
    if (!item) {
        var msg = 'Cannot find id: ' + id + ' in Model: ' + modelName;
        console.error(msg);
        deferred.reject({
            statusCode: 404,
            message: msg
        });
    } else {
        var postObj = hfm.split(item.raw);
        var postData = hfm.parse([postObj.data, '---', postObj.content].join('\n'));

        var prevSource = item.full_source;
        var source = prevSource;

        if (data.source && data.source !== item.source) {
            source = hexo.source_dir + data.source;
        }

        //only update safeKeys
        _.each(safeKeys, function(key, i) {
            if (key in data) {
                postData[key] = data[key];
            }
        });
        delete data._content;

        var raw = hfm.stringify(postData);
        data.raw = raw;
        data.updated = moment();

        if (_.isUndefined(data.tags) == false) {
            item.setTags(data.tags);
            delete data.tags;
        }

        if (_.isUndefined(data.categories) == false) {
            item.setCategories(data.categories);
            delete data.categories;
        }
        extend(item, data);

        item.save(function() {
            hexoFS.writeFile(source, raw, function(err) {
                if (err) return deferred.reject(500, err);
                if (source != prevSource) {
                    fs.unlinkSync(prevSource);
                }
                hexo.source.process([item.source]).then(function() {
                    var newPost = hexo.model(modelName).get(id);
                    return deferred.resolve(_addInfo(newPost));
                });
            });
        });
    }
    return deferred.promise;
}

function _addInfo(post) {
    post.isDraft = post.source.indexOf('_draft') > -1 ? true : false;
    post.isDiscarded = post.source.indexOf('_discarded') > -1 ? true : false;
}
var _updatePost = _update.bind(null, 'Post');

exports.updatePost = _updatePost;

exports.removePost = function(id, hexo) {
    var post = hexo.model('Post').get(id);
    if (!post) {
        var msg = 'Cannot find id: ' + id + ' in Model: Post';

        return Q.reject({
            statusCode: 404,
            message: msg
        });
    } else {
        var path = '_discarded/';
        if (post.source.indexOf('_posts') > -1) {
            path += post.source.slice('_posts/'.length);
        } else {
            path += post.source.slice('_drafts/'.length);
        }
        return _updatePost(id, {
            source: path
        }, hexo);
    }
};

exports.unpublishPost = function(id, hexo) {
    var post = hexo.model('Post').get(id);
    if (!post) {
        return postNotFoundError();
    } else {
        var path = '_drafts/';
        if (post.source.indexOf('_posts') > -1) {
            path += post.source.slice('_posts/'.length);
        } else {
            path += post.source.slice('_discarded/'.length);
        }
        return _updatePost(id, {
            published: false,
            source: path
        }, hexo);
    }
};

